version: '3.8'

services:
  # IGA API Sync Service
  iga-sync:
    build:
      context: .
      dockerfile: api-integration.Dockerfile
    container_name: sparrowvision-iga-sync
    environment:
      # Load from .env file or set directly
      - IGA_API_URL=${IGA_API_URL}
      - IGA_API_KEY=${IGA_API_KEY}
      - IGA_ORG_ID=${IGA_ORG_ID}
      - IGA_TIMEOUT=${IGA_TIMEOUT:-30}
      - IGA_MAX_RETRIES=${IGA_MAX_RETRIES:-3}
      - IGA_RETRY_DELAY=${IGA_RETRY_DELAY:-2}
      - IGA_PAGE_SIZE=${IGA_PAGE_SIZE:-100}
      - IGA_RATE_LIMIT_DELAY=${IGA_RATE_LIMIT_DELAY:-0.5}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - HIGH_RISK_THRESHOLD=${HIGH_RISK_THRESHOLD:-70}
      - INACTIVE_USER_DAYS=${INACTIVE_USER_DAYS:-30}
    volumes:
      # Mount logs and exports directories
      - ./logs:/app/logs
      - ./exports:/app/exports
      - ./data:/app/data
      # Mount configuration if using local env file
      - ./.env:/app/.env:ro
    restart: unless-stopped
    networks:
      - sparrowvision-network

  # Connection Test Service (runs independently)
  iga-test:
    build:
      context: .
      dockerfile: api-integration.Dockerfile
    container_name: sparrowvision-iga-test
    command: ["python", "test_connection.py"]
    environment:
      - IGA_API_URL=${IGA_API_URL}
      - IGA_API_KEY=${IGA_API_KEY}
      - IGA_ORG_ID=${IGA_ORG_ID}
      - IGA_TIMEOUT=${IGA_TIMEOUT:-30}
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    networks:
      - sparrowvision-network
    profiles:
      - test

  # Example Usage Service
  iga-examples:
    build:
      context: .
      dockerfile: api-integration.Dockerfile
    container_name: sparrowvision-iga-examples
    command: ["python", "example_usage.py"]
    environment:
      - IGA_API_URL=${IGA_API_URL}
      - IGA_API_KEY=${IGA_API_KEY}
      - IGA_ORG_ID=${IGA_ORG_ID}
      - HIGH_RISK_THRESHOLD=${HIGH_RISK_THRESHOLD:-70}
      - INACTIVE_USER_DAYS=${INACTIVE_USER_DAYS:-30}
    volumes:
      - ./logs:/app/logs
      - ./exports:/app/exports
      - ./data:/app/data
      - ./.env:/app/.env:ro
    networks:
      - sparrowvision-network
    profiles:
      - examples

  # Scheduled Sync Service (cron-based)
  iga-scheduler:
    build:
      context: .
      dockerfile: api-integration.Dockerfile
    container_name: sparrowvision-iga-scheduler
    command: >
      sh -c "
      echo 'Installing cron...' &&
      apt-get update && apt-get install -y cron &&
      echo '${SYNC_SCHEDULE:-0 */6 * * *} cd /app && python iga_user_sync.py >> /app/logs/scheduled.log 2>&1' > /tmp/crontab &&
      crontab /tmp/crontab &&
      echo 'Starting cron daemon...' &&
      cron -f"
    environment:
      - IGA_API_URL=${IGA_API_URL}
      - IGA_API_KEY=${IGA_API_KEY}
      - IGA_ORG_ID=${IGA_ORG_ID}
      - SYNC_SCHEDULE=${SYNC_SCHEDULE:-0 */6 * * *}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs
      - ./exports:/app/exports
      - ./data:/app/data
      - ./.env:/app/.env:ro
    restart: unless-stopped
    networks:
      - sparrowvision-network
    user: root  # Required for cron
    profiles:
      - scheduler

  # Optional: PostgreSQL for sync history
  postgres:
    image: postgres:15-alpine
    container_name: sparrowvision-iga-db
    environment:
      - POSTGRES_DB=${DB_NAME:-iga_sync}
      - POSTGRES_USER=${DB_USER:-iga_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    restart: unless-stopped
    networks:
      - sparrowvision-network
    profiles:
      - database

  # Optional: Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: sparrowvision-iga-cache
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-sparrowvision}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    restart: unless-stopped
    networks:
      - sparrowvision-network
    profiles:
      - cache

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: sparrowvision-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - sparrowvision-network
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sparrowvision-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - sparrowvision-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Optional: Log management with Loki
  loki:
    image: grafana/loki:2.9.0
    container_name: sparrowvision-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/tmp/loki
    networks:
      - sparrowvision-network
    profiles:
      - logging

  # Optional: Log collection with Promtail
  promtail:
    image: grafana/promtail:2.9.0
    container_name: sparrowvision-promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./logs:/var/log/iga:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
    networks:
      - sparrowvision-network
    depends_on:
      - loki
    profiles:
      - logging

networks:
  sparrowvision-network:
    driver: bridge
    name: sparrowvision-iga-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
